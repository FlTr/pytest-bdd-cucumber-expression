{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pytest-bdd-cucumber-expression","text":"<p>pytest-bdd with native cucumber expressions</p>"},{"location":"history/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"history/#unreleased","title":"Unreleased","text":""},{"location":"history/#added","title":"Added","text":"<ul> <li>CucumberExpressionParser based on pytest-bdd\u2019s StepParser, using cucumber expressions library.</li> <li>Wrapper steps given, when, then around pytest-bdd step decorators.</li> </ul>"},{"location":"reference/pytest_bdd_cucumber_expression/","title":"pytest_bdd_cucumber_expression","text":"<p>Step decorators to be used as direct replacements of pytest-bdd decorators.</p> <p>The decorators wrap their corresponding pytest-bdd step decorators to provide native Cucumber Expression support without the need of explicilty calling a parser. Additionally there is the possibility to call <code>ce</code> as parser.</p>"},{"location":"reference/pytest_bdd_cucumber_expression/#pytest_bdd_cucumber_expression.ce","title":"<code>ce(name, param_names=None)</code>","text":"<p>Cucumber expression parser.</p> <p>To be used similiar to pytest-bdd native parsers.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The step text.</p> required <code>param_names</code> <code>tuple[str, ...] | None</code> <p>Optional names for step parameters.</p> <code>None</code> <p>Returns:</p> Type Description <code>CucumberExpressionParser</code> <p>CucumberExpressionParser (StepParser) object.</p>"},{"location":"reference/pytest_bdd_cucumber_expression/#pytest_bdd_cucumber_expression.given","title":"<code>given(name, *, param_names=None, **kwargs)</code>","text":"<p>Given step decorator with native Cucumber Expression support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Step name.</p> required <code>param_names</code> <code>tuple[str, ...] | None</code> <p>Optional names for step parameters.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Optional further arguments for underlying pytest-bdd step decorator.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Callable[[Callable[P, T]], Callable[P, T]]</code> <p>Decorator function for the step.</p>"},{"location":"reference/pytest_bdd_cucumber_expression/#pytest_bdd_cucumber_expression.then","title":"<code>then(name, *, param_names=None, **kwargs)</code>","text":"<p>Then step decorator with native Cucumber Expression support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Step name.</p> required <code>param_names</code> <code>tuple[str, ...] | None</code> <p>Optional names for step parameters.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Optional further arguments for underlying pytest-bdd step decorator.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Callable[[Callable[P, T]], Callable[P, T]]</code> <p>Decorator function for the step.</p>"},{"location":"reference/pytest_bdd_cucumber_expression/#pytest_bdd_cucumber_expression.when","title":"<code>when(name, *, param_names=None, **kwargs)</code>","text":"<p>When step decorator with native Cucumber Expression support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Step name.</p> required <code>param_names</code> <code>tuple[str, ...] | None</code> <p>Optional names for step parameters.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Optional further arguments for underlying pytest-bdd step decorator.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Callable[[Callable[P, T]], Callable[P, T]]</code> <p>Decorator function for the step.</p>"},{"location":"reference/pytest_bdd_cucumber_expression/parser/","title":"pytest_bdd_cucumber_expression.parser","text":"<p>Wrap the cucumber expression into a StepParser.</p>"},{"location":"reference/pytest_bdd_cucumber_expression/parser/#pytest_bdd_cucumber_expression.parser.CucumberExpressionParser","title":"<code>CucumberExpressionParser</code>","text":"<p>               Bases: <code>StepParser</code></p> <p>A StepParser for Cucumber Expressions.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The step text.</p> required <code>param_names</code> <code>tuple[str, ...] | None</code> <p>A tuple of expression argument names.</p> <code>None</code>"},{"location":"reference/pytest_bdd_cucumber_expression/parser/#pytest_bdd_cucumber_expression.parser.CucumberExpressionParser.__init_subclasss__","title":"<code>__init_subclasss__()</code>  <code>classmethod</code>","text":"<p>Extend available ParameterTypes by sub-classing.</p>"},{"location":"reference/pytest_bdd_cucumber_expression/parser/#pytest_bdd_cucumber_expression.parser.CucumberExpressionParser.extra_param_types","title":"<code>extra_param_types()</code>  <code>classmethod</code>","text":"<p>Additional custom ParameterTypes.</p> <p>Returns:</p> Type Description <code>list[ParameterType]</code> <p>A list of custom ParameterTypes.</p>"}]}